<consulo-plugin>
	<id>com.jetbrains.lang.dart</id>
	<name>Dart</name>
	<description>Support for Dart programming language</description>
	<version>SNAPSHOT</version>
	<category>Custom Languages</category>
	<vendor>JetBrains</vendor>
	<depends>com.intellij.xml</depends>
	<depends>consulo.library.flexmark</depends>

	<tags>
		<tag>custom.language</tag>
	</tags>

	<extensions defaultExtensionNs="com.intellij.copyright">
		<updater filetype="Dart" implementationClass="com.jetbrains.lang.dart.ide.copyright.UpdateDartCopyrightsProvider"/>
	</extensions>

	<extensions defaultExtensionNs="com.intellij">
		<fileTypeFactory implementation="com.jetbrains.lang.dart.DartFileTypeFactory"/>
		<iconDescriptorUpdater implementation="consulo.dart.DartIconDescriptorUpdater"/>
		<lang.syntaxHighlighterFactory language="Dart" implementationClass="com.jetbrains.lang.dart.highlight.DartSyntaxHighlighterFactory"/>
		<problemFileHighlightFilter implementation="com.jetbrains.lang.dart.highlight.DartProblemFileHighlightFilter"/>
		<moduleExtensionProvider key="dart"
								 name="Google Dart"
								 icon="consulo.google.dart.DartIconGroup@dart"
								 immutableClass="consulo.dart.module.extension.DartModuleExtension"
								 mutableClass="consulo.dart.module.extension.DartMutableModuleExtension"/>

		<lang.braceMatcher language="Dart" implementationClass="com.jetbrains.lang.dart.ide.DartBraceMatcher"/>
		<typedHandler implementation="com.jetbrains.lang.dart.ide.editor.DartTypeHandler" id="Dart"/>

		<lang.commenter language="Dart" implementationClass="com.jetbrains.lang.dart.ide.DartCommenter"/>
		<lang.parserDefinition language="Dart" implementationClass="com.jetbrains.lang.dart.DartParserDefinition"/>

		<languageInjector implementation="com.jetbrains.lang.dart.psi.DartLanguageInjector"/>

		<colorSettingsPage implementation="com.jetbrains.lang.dart.highlight.DartColorsAndFontsPage"/>
		<lang.foldingBuilder language="Dart" implementationClass="com.jetbrains.lang.dart.ide.folding.DartFoldingBuilder"/>

		<lang.documentationProvider language="Dart" implementationClass="com.jetbrains.lang.dart.ide.documentation.DartDocumentationProvider"/>
		<lang.findUsagesProvider language="Dart" implementationClass="com.jetbrains.lang.dart.ide.findUsages.DartFindUsagesProvider"/>
		<usageTypeProvider implementation="com.jetbrains.lang.dart.ide.findUsages.DartUsageTypeProvider"/>
		<lang.implementationTextSelectioner language="Dart"
											implementationClass="com.jetbrains.lang.dart.ide.DartImplementationTextSelectioner"/>
		<lang.formatter language="Dart" implementationClass="com.jetbrains.lang.dart.ide.formatter.DartFormattingModelBuilder"/>
		<lang.psiStructureViewFactory language="Dart" implementationClass="com.jetbrains.lang.dart.ide.structure.DartStructureViewFactory"/>
		<lang.elementManipulator forClass="com.jetbrains.lang.dart.psi.DartPathOrLibraryReference"
								 implementationClass="com.jetbrains.lang.dart.psi.impl.DartFileReferenceImpl$DartPathOrLibraryManipulator"/>
		<lang.refactoringSupport language="Dart"
								 implementationClass="com.jetbrains.lang.dart.ide.refactoring.DartRefactoringSupportProvider"/>

		<codeInsight.parameterInfo language="Dart"
								   implementationClass="com.jetbrains.lang.dart.ide.info.DartParameterInfoHandler"/>

		<lang.parserDefinition language="DART_IN_HTML" implementationClass="com.jetbrains.lang.dart.DartParserDefinition" />
		<lang.syntaxHighlighterFactory language="DART_IN_HTML" implementationClass="com.jetbrains.lang.dart.highlight.DartSyntaxHighlighterFactory" />

		<renamePsiElementProcessor implementation="com.jetbrains.lang.dart.ide.DartRenamePsiElementProcessor"/>
		<codeStyleSettingsProvider implementation="com.jetbrains.lang.dart.ide.formatter.settings.DartCodeStyleSettingsProvider"/>
		<langCodeStyleSettingsProvider implementation="com.jetbrains.lang.dart.ide.formatter.settings.DartLanguageCodeStyleSettingsProvider"/>

		<codeInsight.lineMarkerProvider language="Dart"
										implementationClass="com.jetbrains.lang.dart.ide.marker.DartImplementationsMarkerProvider"/>
		<codeInsight.lineMarkerProvider language="Dart"
										implementationClass="com.jetbrains.lang.dart.ide.marker.DartMethodOverrideMarkerProvider"/>

		<codeInsight.gotoSuper language="Dart" implementationClass="com.jetbrains.lang.dart.ide.actions.DartGotoSuperHandler"/>

		<codeInsight.overrideMethod language="Dart"
									implementationClass="com.jetbrains.lang.dart.ide.generation.DartOverrideMethodHandler"/>
		<codeInsight.implementMethod language="Dart"
									 implementationClass="com.jetbrains.lang.dart.ide.generation.DartImplementMethodHandler"/>

		<fileBasedIndex implementation="com.jetbrains.lang.dart.ide.index.DartImportAndExportIndex"/>
		<fileBasedIndex implementation="com.jetbrains.lang.dart.ide.index.DartPathIndex"/>
		<fileBasedIndex implementation="com.jetbrains.lang.dart.ide.index.DartSourceIndex"/>
		<fileBasedIndex implementation="com.jetbrains.lang.dart.ide.index.DartClassIndex"/>
		<fileBasedIndex implementation="com.jetbrains.lang.dart.ide.index.DartLibraryIndex"/>
		<fileBasedIndex implementation="com.jetbrains.lang.dart.ide.index.DartComponentIndex"/>
		<fileBasedIndex implementation="com.jetbrains.lang.dart.ide.index.DartSymbolIndex"/>
		<fileBasedIndex implementation="com.jetbrains.lang.dart.ide.index.DartInheritanceIndex"/>

		<definitionsScopedSearch implementation="com.jetbrains.lang.dart.ide.index.DartInheritanceIndex$DefinitionsSearchExecutor"/>

		<internalFileTemplate name="Dart Class"/>
		<internalFileTemplate name="Dart Interface"/>
		<internalFileTemplate name="Dart Empty File"/>

		<liveTemplateMacro implementation="com.jetbrains.lang.dart.ide.template.macro.DartListVariableMacro"/>
		<liveTemplateMacro implementation="com.jetbrains.lang.dart.ide.template.macro.DartIterableVariableMacro"/>
		<liveTemplateMacro implementation="com.jetbrains.lang.dart.ide.template.macro.DartSuggestIndexNameMacro"/>
		<liveTemplateMacro implementation="com.jetbrains.lang.dart.ide.template.macro.DartSuggestVariableNameMacro"/>

		<liveTemplateContext implementation="com.jetbrains.lang.dart.ide.template.DartTemplateContextType"/>
		<bundleLiveTemplateSet path="liveTemplates/dart_miscellaneous" />
		<bundleLiveTemplateSet path="liveTemplates/dart_iterations" />
		<bundleLiveTemplateSet path="liveTemplates/dart_surround" />

		<lang.surroundDescriptor language="Dart"
								 implementationClass="com.jetbrains.lang.dart.ide.surroundWith.DartExpressionSurroundDescriptor"/>
		<lang.surroundDescriptor language="Dart"
								 implementationClass="com.jetbrains.lang.dart.ide.surroundWith.DartStatementsSurroundDescriptor"/>

		<gotoClassContributor implementation="com.jetbrains.lang.dart.ide.DartClassContributor"/>
		<gotoSymbolContributor implementation="com.jetbrains.lang.dart.ide.DartSymbolContributor"/>

		<completion.contributor language="Dart" implementationClass="com.jetbrains.lang.dart.ide.completion.DartKeywordCompletionContributor"/>
		<completion.contributor language="Dart"
								implementationClass="com.jetbrains.lang.dart.ide.completion.DartLibraryNameCompletionContributor"/>
		<completion.contributor language="Dart"
								implementationClass="com.jetbrains.lang.dart.ide.completion.DartArgumentNameContributor"/>
		<completion.contributor language="Dart"
								implementationClass="com.jetbrains.lang.dart.ide.completion.DartClassNameCompletionContributor"/>

		<externalAnnotator language="Dart" implementationClass="com.jetbrains.lang.dart.analyzer.DartInProcessAnnotator"/>
		<externalAnnotator language="HTML" implementationClass="com.jetbrains.lang.dart.analyzer.DartInProcessAnnotator"/>
		<annotator language="Dart" implementationClass="com.jetbrains.lang.dart.ide.annotator.DartColorAnnotator"/>
		<!--<annotator language="Dart" implementationClass="com.jetbrains.lang.dart.ide.annotator.DartUnresolvedReferenceVisitor"/>-->

		<projectService serviceInterface="com.jetbrains.lang.dart.psi.DartClassResolveCache"
						serviceImplementation="com.jetbrains.lang.dart.psi.DartClassResolveCache"/>

		<codeInspection.InspectionExtension id="dartGlobalInspection"
											implementation="com.jetbrains.lang.dart.ide.inspections.analyzer.DartInspectionExtensionsFactory"/>

		<xdebugger.breakpointType implementation="com.jetbrains.lang.dart.ide.runner.DartLineBreakpointType" />
		<xdebugger.lineBreakpointTypeResolver filetype="Dart" implementationClass="consulo.dart.debugger.breakpoint.DartLineBreakpointTypeResolver" />
		<programRunner implementation="com.jetbrains.lang.dart.ide.runner.DartRunner" />
		<!--command line-->
		<configurationType implementation="com.jetbrains.lang.dart.ide.runner.server.DartCommandLineRunConfigurationType"/>
		<runConfigurationProducer implementation="com.jetbrains.lang.dart.ide.runner.server.DartCommandLineRuntimeConfigurationProducer"/>

		<projectService serviceInterface="com.jetbrains.lang.dart.analyzer.DartAnalyzerService"
						serviceImplementation="com.jetbrains.lang.dart.analyzer.DartAnalyzerService"/>

		<writingAccessProvider implementation="com.jetbrains.lang.dart.ide.DartWritingAccessProvider"/>

		<!--unit test-->
		<configurationType implementation="com.jetbrains.lang.dart.ide.runner.unittest.DartUnitRunConfigurationType"/>
		<runConfigurationProducer implementation="com.jetbrains.lang.dart.ide.runner.unittest.DartUnitRuntimeConfigurationProducer"/>

		<!--inspections-->

		<globalInspection shortName="DartGlobalInspectionTool"
						  bundle="com.jetbrains.lang.dart.DartBundle"
						  key="dart.analyzer.inspection.display.name"
						  groupName="Dart"
						  enabledByDefault="true"
						  level="WARNING"
						  implementationClass="com.jetbrains.lang.dart.ide.inspections.analyzer.DartGlobalInspectionTool"/>

		<localInspection language="Dart" bundle="com.jetbrains.lang.dart.DartBundle" key="dart.deprecated.api.usage"
						 groupName="Dart" enabledByDefault="true" level="WEAK WARNING"
						 implementationClass="com.jetbrains.lang.dart.ide.inspections.DartDeprecatedApiUsageInspection"/>

		<sdkType implementation="com.jetbrains.lang.dart.ide.DartSdkType"/>

		<projectService serviceImplementation="com.jetbrains.lang.dart.DartProjectComponent" lazy="false" />
	</extensions>

	<extensions defaultExtensionNs="com.intellij.xml">
		<html.scriptContentProvider language="Dart" implementationClass="com.jetbrains.lang.dart.DartScriptContentProvider"/>
	</extensions>

	<actions>
		<action id="Dart.NewDartFile" class="com.jetbrains.lang.dart.ide.actions.CreateDartFileAction"
				text="Dart File" description="Create new Dart file/class/interface" require-module-extensions="dart">
			<add-to-group group-id="NewGroup1" anchor="before" relative-to-action="NewFile"/>
		</action>
		<action id="Generate.Constructor.Dart" class="com.jetbrains.lang.dart.ide.generation.DartGenerateConstructorAction"
				text="Constructor">
			<add-to-group anchor="first" group-id="GenerateGroup"/>
		</action>
		<action id="Generate.GetAccessor.Dart" class="com.jetbrains.lang.dart.ide.generation.DartGenerateGetterAction"
				text="Getter">
			<add-to-group anchor="after" relative-to-action="Generate.Constructor.Dart" group-id="GenerateGroup"/>
		</action>
		<action id="Generate.SetAccessor.Dart" class="com.jetbrains.lang.dart.ide.generation.DartGenerateSetterAction"
				text="Setter">
			<add-to-group anchor="after" relative-to-action="Generate.GetAccessor.Dart" group-id="GenerateGroup"/>
		</action>
		<action id="Generate.GetSetAccessor.Dart" class="com.jetbrains.lang.dart.ide.generation.DartGenerateGetterSetterAction"
				text="Getter and Setter">
			<add-to-group anchor="after" relative-to-action="Generate.SetAccessor.Dart" group-id="GenerateGroup"/>
		</action>

		<group can-use-project-as-default="true" require-module-extensions="dart">
			<action id="Dart.dart2js" class="com.jetbrains.lang.dart.ide.actions.Dart2JSAction" text="Compile Dart to JavaScript" description="Run 'dart2js' compiler"/>
			<action id="Dart.pub.build" class="com.jetbrains.lang.dart.ide.actions.DartPubBuildAction" text="Dart: Build" description="Run 'pub build'"/>
			<action id="Dart.pub.upgrade" class="com.jetbrains.lang.dart.ide.actions.DartPubUpgradeAction" text="Dart: Upgrade Dependencies" description="Run 'pub upgrade'"/>
			<separator/>
			<add-to-group group-id="EditorPopupMenu" anchor="first"/>
			<add-to-group group-id="ProjectViewPopupMenu" relative-to-action="CutCopyPasteGroup" anchor="before"/>
		</group>

		<!--<action id="open.in.dartium" class="com.jetbrains.lang.dart.ide.actions.OpenInDartiumAction">
			<add-to-group group-id="RunContextPopupGroup" anchor="first"/>
		</action>  -->
	</actions>
</consulo-plugin>
